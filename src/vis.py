from PIL import Image, ImageDraw, ImageFont
import math
import numbers
import time
import os

# attentions = [('<s>', 0.05371476197615266), ('signed', 0.04623189428821206), ('▁__', 0.06619432289153337), ('int', 0.04338795877993107), ('64', 0.05944718699902296), ('▁__', 0.07974209426902235), ('fastcall', 0.012191058573080227), ('▁prussdrv', 0.016174287302419543), ('_', 0.006316311511909589), ('open', 0.006278385146288201), ('▁(', 0.005812877760035917), ('▁unsigned', 0.006542516173794866), ('▁int', 0.007601734716445208), ('▁', 0.0014102383502176963), ('host', 0.005647892528941156), ('_', 0.10096491017793596), ('interrupt', 0.06308022724988405), ('</s>', 0.1639344697468914), ('▁)', 0.005560809193411842), ('▁{', 0.004054239165270701), ('▁char', 0.005071443549240939), ('▁', 0.0002969321940327063), ('name', 0.00041972322014771635), ('</s>', 0.00024544635743950494), ('▁;', 0.00267626803542953), ('▁unsigned', 0.0020412801968632266), ('▁__', 0.002703272446524352), ('int', 0.002621899009682238), ('64', 0.0038219763664528728), ('▁', 6.902074710524175e-05), ('@@v3@@', 0.00019665362015075516), ('</s>', 3.104150937360828e-05), ('▁;', 0.0008595536201028153), ('▁', 0.00011294239720882615), ('@@v3@@', 0.00018049273057840765), ('</s>', 0.00010896813478211698), ('▁=', 0.000248037507844856), ('▁__', 0.00021740561351180077), ('readfsqword', 0.00044129778507340234), ('▁(', 0.00011705139968398726), ('▁Number', 0.00021458768787852023), ('▁)', 7.162483893807803e-05), ('▁;', 0.00024090860824799165), ('▁if', 0.001470692630391568), ('▁(', 0.00013445228796626907), ('▁dword', 0.0005565850451603183), ('_15', 8.263003110187128e-05), ('A', 0.00013403786942944862), ('4', 0.00015507180614804383), ('▁[', 0.000807005024398677), ('▁', 0.0004533571318461327), ('host', 0.000601133513100649), ('_', 0.02908933035632799), ('interrupt', 0.09494663479927112), ('</s>', 0.0003706111547217006), ('▁]', 0.0009408371442987118), ('▁)', 0.00020107796444790438), ('▁return', 0.00012565366341732442), ('▁Number', 4.981948995919083e-05), ('▁;', 0.0002477095904396265), ('▁sprintf', 0.0003653645599115407), ('▁(', 0.00010094767367263557), ('▁&', 0.00017912658222485334), ('▁', 8.38789405861462e-05), ('name', 7.399491869364283e-05), ('</s>', 0.0003455519886301772), ('▁,', 6.764907948308974e-05), ('▁String', 0.000179758918193329), ('▁,', 0.0005079417533124797), ('▁', 0.0003710886903718347), ('host', 0.00047055936556716915), ('_', 0.02811665213721426), ('interrupt', 0.04630460007683723), ('</s>', 0.011194948150659911), ('▁)', 0.00017406649931217544), ('▁;', 0.0003514225718390662), ('▁dword', 0.000637137629382778), ('_15', 7.758426181680989e-05), ('A', 9.205621881847037e-05), ('4', 8.138139219227014e-05), ('▁[', 0.0009266682754969224), ('▁', 0.00046335365823324537), ('host', 0.0004237093380652368), ('_', 8.331479330081493e-05), ('interrupt', 0.00024946031408035196), ('</s>', 0.0004151343018747866), ('▁]', 0.0), ('▁=', 0.0), ('▁open', 0.0), ('▁(', 0.0), ('▁&', 0.0), ('▁', 0.0), ('name', 0.0), ('</s>', 0.0), ('▁,', 0.0), ('▁Number', 0.0), ('▁)', 0.0), ('▁;', 0.0), ('▁return', 0.0), ('▁_', 0.0), ('pr', 0.0), ('ussdrv', 0.0), ('_', 0.0), ('me', 0.0), ('mmap', 0.0), ('_', 0.0), ('init', 0.0), ('▁(', 0.0), ('▁)', 0.0), ('▁;', 0.0), ('▁}', 0.0), ('</s>', 0.0), ('<pad>', 0.0), ('<pad>', 0.0), ('<pad>', 0.0), ('<pad>', 0.0), ('<pad>', 0.0), ('<pad>', 0.0)]
# main_token = (82, 83, 84)
attentions = [('<s>', 0.10207811277359724), ('signed', 0.09912003017961979), ('▁__', 0.11910671088844538), ('int', 0.09690495580434799), ('64', 0.1125088706612587), ('▁__', 0.1232720473781228), ('fastcall', 0.028671336767729372), ('▁prussdrv', 0.07879083044826984), ('_', 0.030557231802958995), ('open', 0.05082572530955076), ('▁(', 0.042132430244237185), ('▁unsigned', 0.045619764598086476), ('▁int', 0.05095729173626751), ('▁', 0.0045541784493252635), ('host', 0.0100167648633942), ('_', 0.0021547296055359766), ('interrupt', 0.00123994069872424), ('</s>', 0.0014890392776578665), ('▁)', 0.0), ('▁{', 0.0), ('▁char', 0.0), ('▁', 0.0), ('name', 0.0), ('</s>', 0.0), ('▁;', 0.0), ('▁unsigned', 0.0), ('▁__', 0.0), ('int', 0.0), ('64', 0.0), ('▁', 0.0), ('@@v3@@', 0.0), ('</s>', 0.0), ('▁;', 0.0), ('▁', 0.0), ('@@v3@@', 0.0), ('</s>', 0.0), ('▁=', 0.0), ('▁__', 0.0), ('readfsqword', 0.0), ('▁(', 0.0), ('▁Number', 0.0), ('▁)', 0.0), ('▁;', 0.0), ('▁if', 0.0), ('▁(', 0.0), ('▁dword', 0.0), ('_15', 0.0), ('A', 0.0), ('4', 0.0), ('▁[', 0.0), ('▁', 0.0), ('host', 0.0), ('_', 0.0), ('interrupt', 0.0), ('</s>', 0.0), ('▁]', 0.0), ('▁)', 0.0), ('▁return', 0.0), ('▁Number', 0.0), ('▁;', 0.0), ('▁sprintf', 0.0), ('▁(', 0.0), ('▁&', 0.0), ('▁', 0.0), ('name', 0.0), ('</s>', 0.0), ('▁,', 0.0), ('▁String', 0.0), ('▁,', 0.0), ('▁', 0.0), ('host', 0.0), ('_', 0.0), ('interrupt', 0.0), ('</s>', 0.0), ('▁)', 0.0), ('▁;', 0.0), ('▁dword', 0.0), ('_15', 0.0), ('A', 0.0), ('4', 0.0), ('▁[', 0.0), ('▁', 0.0), ('host', 0.0), ('_', 0.0), ('interrupt', 0.0), ('</s>', 0.0), ('▁]', 0.0), ('▁=', 0.0), ('▁open', 0.0), ('▁(', 0.0), ('▁&', 0.0), ('▁', 0.0), ('name', 0.0), ('</s>', 0.0), ('▁,', 0.0), ('▁Number', 0.0), ('▁)', 0.0), ('▁;', 0.0), ('▁return', 0.0), ('▁_', 0.0), ('pr', 0.0), ('ussdrv', 0.0), ('_', 0.0), ('me', 0.0), ('mmap', 0.0), ('_', 0.0), ('init', 0.0), ('▁(', 0.0), ('▁)', 0.0), ('▁;', 0.0), ('▁}', 0.0), ('</s>', 0.0), ('<pad>', 0.0), ('<pad>', 0.0), ('<pad>', 0.0), ('<pad>', 0.0), ('<pad>', 0.0), ('<pad>', 0.0)]
main_token = (14, 15, 16)

img_width = 510

img         = Image.new("RGBA", (img_width, 215), (255,255,255,0))
font        = ImageFont.truetype("DejaVuSansMono.ttf", 15)
bold_font   = ImageFont.truetype("DejaVuSansMono-Bold.ttf", 15)
draw        = ImageDraw.Draw(img)

indent = 10
x, y = indent, 10

max_score = math.log(max([score + 1e-20 for token, score in attentions if token != '<s>' and token != '</s>' and token != '<pad>' and score != 0.0]))
min_score = math.log(min([score + 1e-20 for token, score in attentions if token != '<s>' and token != '</s>' and token != '<pad>' and score != 0.0]))

keywords = ['int', 'unsigned', 'signed', 'char', 'if', 'return']

if min_score < -20:
    min_score = -20

if isinstance(main_token, tuple):
    main_token_width = 0
    for i in main_token:
        text = attentions[i][0]
        if text.strip() in keywords:
            main_token_width += bold_font.getsize(text)[0]
        else:
            main_token_width += font.getsize(text)[0]

for i, (token, score) in enumerate(attentions):
    if token == '<s>' or token == '</s>' or token == '<pad>': continue

    if '▁' in token:
        token = token.replace('▁', ' ')

    text = token

    if text.strip() in keywords:
        w, h = bold_font.getsize(text)
    else:
        w, h = font.getsize(text)

    if x + w >= img_width or (isinstance(main_token, tuple) and i in main_token and x + main_token_width >= img_width):
        x = 10
        y += h + 5

    if isinstance(main_token, numbers.Number) and i == main_token:
        draw.rectangle((x-3, y-3, x+w+3, y+h+3), outline=(0, 0, 0, 255), width=2)
    elif isinstance(main_token, tuple) and i in main_token:
        if i == main_token[0]:
            box_x = x
            box_y = y
        if i == main_token[-1]:
            draw.rectangle((box_x-3, box_y-3, x+w+3, y+h+3), outline=(0, 0, 0, 255), width=2)
    else:
        dev = (math.log(score + 1e-20) - min_score) / (max_score - min_score)
        dev = max(dev, 0)
        alpha = int(230 * (dev ** 2))
        draw.rectangle((x, y, x + w, y + h), fill=(72, 181, 112, alpha))

    if text.strip() in keywords:
        draw.text((x, y), text, font=bold_font, fill=(0, 0, 0, 255))
    else:
        draw.text((x, y), text, font=font, fill=(0, 0, 0, 255))

    if ';' in token:
        x = indent
        y += h + 5
    elif '{' in token:
        indent += 20
        x = indent
        y += h + 5
    elif '}' in token:
        indent -= 20
        x = indent
        y += h + 5
    elif isinstance(main_token, numbers.Number) and (i == main_token or i == main_token - 1):
        x += w + 5
    elif isinstance(main_token, tuple) and (i == main_token[0] - 1 or i == main_token[-1]):
        x += w + 5
    else:
        x += w

if not os.path.isdir('vis'): os.mkdir('vis')

fname = 'vis/vis_' + time.strftime("%d-%m-%Y") + '_' + time.strftime("%H:%M:%S") + '.png'

img.save(fname)
